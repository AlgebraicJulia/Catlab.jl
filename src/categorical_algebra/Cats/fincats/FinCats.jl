export FinCat, FinCatSize, ob_generator, hom_generator,
  ob_generator_name, hom_generator_name, ob_generators, hom_generators,
  equations, is_discrete, is_free, graph, edges, src, tgt, presentation,
  FinFunctor, ob_generator, hom_generator

using StructEquality
using Reexport
using DataStructures: IntDisjointSets, in_same_set, num_groups

using ACSets
using GATlab
import GATlab: equations
using ....Theories: ThCategory
import ....Theories: dom, codom, id, compose, ⋅, ∘
using ....Graphs
@reexport using ..Categories
import ..Categories: CatSize, ob, hom, op

# Categories
############

""" Size of a finitely presented category.
"""
struct FinCatSize <: CatSize end

""" A finitely presented (but not necessarily finite!) category.
"""
const FinCat{Ob,Hom} = Cat{Ob,Hom,FinCatSize}

""" Object generators of finitely presented category.

The object generators of finite presented category are almost always the same as
the objects. In principle, however, it is possible to have equations between
objects, so that there are fewer objects than object generators.
"""
function ob_generators end

""" Morphism generators of finitely presented category.
"""
function hom_generators end

""" Coerce or look up object generator in a finitely presented category.

Because object generators usually coincide with objects, the default method for
[`ob`](@ref) in finitely presented categories simply calls this function.
"""
function ob_generator end

ob(C::FinCat, x) = ob_generator(C, x)

""" Coerce or look up morphism generator in a finitely presented category.

Since morphism generators often have a different data type than morphisms (e.g.,
in a free category on a graph, the morphism generators are edges and the
morphisms are paths), the return type of this function is generally different
than that of [`hom`](@ref).
"""
function hom_generator end

""" Name of object generator, if any.

When object generators have names, this function is a one-sided inverse to
[`ob_generator`](@ref) in that `ob_generator(C, ob_generator_name(C, x)) == x`.
"""
function ob_generator_name end

""" Name of morphism generator, if any.

When morphism generators have names, this function is a one-sided inverse to
[`hom_generator`](@ref). See also: [`ob_generator_name`](@ref).
"""
function hom_generator_name end

# Second clause should be superfluous but we'll include it anyway.
Base.isempty(C::FinCat) = isempty(ob_generators(C)) && isempty(hom_generators(C))

""" Is the category discrete?

A category is *discrete* if it is has no non-identity morphisms.
"""
is_discrete(C::FinCat) = isempty(hom_generators(C))

""" Is the category freely generated?
"""
is_free(C::FinCat) = isempty(equations(C))

"""Graph underlying a finitely presented category whose 
object and
hom generators are indexable, other
than one explicitly generated by a graph.
"""
function graph(C::FinCat) 
  g = NamedGraph{Symbol,Symbol}()
  obgens = ob_generators(C)
  homgens = hom_generators(C)
  add_vertices!(g,length(obgens);vname=nameof.(obgens))
  s(f) = only(indexin([dom(C,f)],obgens))
  t(f) = only(indexin([codom(C,f)],obgens))
  add_edges!(g,Int[s(f) for f in homgens],Int[t(f) for f in homgens];ename=nameof.(homgens)) 
  g
end
